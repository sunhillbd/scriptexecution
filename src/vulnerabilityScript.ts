export class VulnerabilityScript {
  scriptId: number;
  dependencies: number[];

  constructor(scriptId: number, dependencies: number[] = []) {
    this.scriptId = scriptId;
    this.dependencies = dependencies;
  }

  getScriptId(): number {
    return this.scriptId;
  }

  getDependencies(): number[] {
    return this.dependencies;
  }
}

export function getExecutionOrder(scripts: VulnerabilityScript[]): number[] {
  const visited = new Set<number>();
  const visiting = new Set<number>(); // Tracks the current path to detect cycles
  const executionOrder: number[] = [];

  function visit(script: VulnerabilityScript) {
    if (visited.has(script.scriptId)) {
      return;
    }

    if (visiting.has(script.scriptId)) {
      throw new Error(`Circular dependency detected involving script ${script.scriptId}`);
    }

    visiting.add(script.scriptId);

    script.dependencies
      .map(depId => scripts.find(s => s.scriptId === depId)!)
      .forEach(visit);

    visiting.delete(script.scriptId);
    visited.add(script.scriptId);
    executionOrder.push(script.scriptId);
  }

  scripts.forEach(visit);
  return executionOrder;
}

